package nl.spijkerman.ivo.euler;

import org.jetbrains.annotations.NotNull;

import java.util.stream.IntStream;

public class Problem12 implements Problem {

    private long countDivisors(int n) {
        return IntStream.rangeClosed(2, (int) Math.sqrt(n))
                .filter(i -> n % i == 0)
                .count() * 2 + 2;
    }


    @Override
    public @NotNull Object run() {
        int t = 1;
        int i = 2;
        long d;
        do {
            t += i++;
            d = countDivisors(t);
        } while (d < 500);
        return t;
    }

    @Override
    public @NotNull String description() {
        return "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n" +
                "\n" +
                "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n" +
                "\n" +
                "Let us list the factors of the first seven triangle numbers:\n" +
                "\n" +
                "     1: 1\n" +
                "     3: 1,3\n" +
                "     6: 1,2,3,6\n" +
                "    10: 1,2,5,10\n" +
                "    15: 1,3,5,15\n" +
                "    21: 1,3,7,21\n" +
                "    28: 1,2,4,7,14,28\n" +
                "\n" +
                "We can see that 28 is the first triangle number to have over five divisors.\n" +
                "\n" +
                "What is the value of the first triangle number to have over five hundred divisors?";
    }
}
